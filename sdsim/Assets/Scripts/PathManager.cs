using UnityEngine;
using System.Collections;

public class PathManager : MonoBehaviour {

	public CarPath path;

	public GameObject prefab;

	public Transform startPos;

	Vector3 span = Vector3.zero;

	public float spanDist = 5f;

	public int numSpans = 100;

	public float turnInc = 1f;

	public bool sameRandomPath = true;

	public int randSeed = 2;

	public bool doMakeRandomPath = true;

	public bool doLoadScriptPath = false;

	public bool doLoadPointPath = false;//true

    public bool doBuildRoad = false;

	public bool doChangeLanes = false;

	public int smoothPathIter = 0;

	public bool doShowPath = false;

    public string pathToLoad = "none";

	public RoadBuilder roadBuilder;
	public RoadBuilder semanticSegRoadBuilder;

	public LaneChangeTrainer laneChTrainer;

	void Awake () 
	{
		if(sameRandomPath)
			Random.InitState(randSeed);

		InitNewRoad();			
	}

	public void InitNewRoad()
	{
		if(doMakeRandomPath)
		{
			MakeRandomPath();
		}
		else if (doLoadScriptPath)
		{
			MakeScriptedPath();
		}
		else if(doLoadPointPath)
		{
			MakePointPath();
		}

		if(smoothPathIter > 0)
			SmoothPath();

		//Should we build a road mesh along the path?
		if(doBuildRoad && roadBuilder != null)
			roadBuilder.InitRoad(path);

		if(doBuildRoad && semanticSegRoadBuilder != null)
			semanticSegRoadBuilder.InitRoad(path);

		if(laneChTrainer != null && doChangeLanes)
		{
			laneChTrainer.ModifyPath(ref path);
		}

		if(doShowPath)
		{
			for(int iN = 0; iN < path.nodes.Count; iN++)
			{
				Vector3 np = path.nodes[iN].pos;
				GameObject go = Instantiate(prefab, np, Quaternion.identity) as GameObject;
				go.tag = "pathNode";
				go.transform.parent = this.transform;
			}
		}
	}

	public void DestroyRoad()
	{
		GameObject[] prev = GameObject.FindGameObjectsWithTag("pathNode");

		foreach(GameObject g in prev)
			Destroy(g);

		if(roadBuilder != null)
			roadBuilder.DestroyRoad();
	}

    public Vector3 GetPathStart()
    {
        return startPos.position;
    }

    public Vector3 GetPathEnd()
    {
        int iN = path.nodes.Count - 1;

        if(iN < 0)
            return GetPathStart();

        return path.nodes[iN].pos;
    }

	void SmoothPath()
	{
		while(smoothPathIter > 0)
		{
			path.SmoothPath();
			smoothPathIter--;
		}
	}

	void MakePointPath()
	{
        // use this tool to get the points from .svg
        //https://betravis.github.io/shape-tools/path-to-polygon/

        //double[,] lines = { { 464.67999999999995, 136.52 }, { 557.26, 229.23000000000002 }, { 626.3299999999999, 297.12 }, { 654.17, 320.48 }, { 698.29, 343.84000000000003 }, { 725.77, 351.84000000000003 }, { 748.1999999999999, 348.56 }, { 775.3199999999999, 312.42 }, { 773.15, 256.94 }, { 750.37, 219.34000000000003 }, { 721.4, 186.18 }, { 673.34, 139.44 }, { 629.5799999999999, 114.25 }, { 598.85, 96.0 }, { 543.16, 59.13000000000001 }, { 529.05, 48.13000000000001 }, { 513.86, 37.55000000000001 }, { 504.86, 27.330000000000013 }, { 500.52, 19.66000000000001 }, { 516.0699999999999, 11.66000000000001 }, { 533.0699999999999, 11.290000000000006 }, { 544.64, 10.200000000000003 }, { 569.23, 10.930000000000007 }, { 603.59, 9.830000000000013 }, { 637.59, 10.930000000000007 }, { 686.05, 11.66000000000001 }, { 738.12, 13.850000000000009 }, { 772.47, 17.85000000000001 }, { 807.1899999999999, 30.260000000000005 }, { 836.48, 57.63000000000001 }, { 856.73, 95.96000000000001 }, { 868.3, 132.1 }, { 882.41, 170.1 }, { 887.8299999999999, 192.36 }, { 886.75, 224.12 }, { 884.22, 243.82999999999998 }, { 881.3199999999999, 264.64 }, { 882.05, 281.06 }, { 892.17, 299.68 }, { 900.85, 313.55 }, { 900.13, 324.86 }, { 894.6999999999999, 335.45 }, { 889.28, 349.68 }, { 887.8299999999999, 372.68 }, { 888.55, 388.38 }, { 887.8299999999999, 444.95 }, { 883.8299999999999, 538.76 }, { 878.41, 593.8800000000001 }, { 869.41, 616.8800000000001 }, { 859.64, 626.0 }, { 822.04, 633.3 }, { 741.39, 624.54 }, { 693.66, 616.8800000000001 }, { 654.61, 608.1200000000001 }, { 609.76, 581.47 }, { 585.54, 549.71 }, { 576.13, 511.02000000000004 }, { 567.4499999999999, 475.25000000000006 }, { 558.05, 420.5 }, { 545.4, 343.84000000000003 }, { 540.3299999999999, 303.33 }, { 536.3299999999999, 283.98 }, { 509.2099999999999, 262.81 }, { 477.03, 273.40000000000003 }, { 468.7099999999999, 289.82 }, { 465.4, 307.71 }, { 467.2099999999999, 333.99 }, { 469.37, 358.45 }, { 480.22, 454.81 }, { 483.48, 491.31 }, { 481.30999999999995, 523.4300000000001 }, { 465.4, 551.54 }, { 442.98, 560.3 }, { 416.98, 568.69 }, { 385.52, 573.8 }, { 368.52, 577.0899999999999 }, { 354.41999999999996, 593.52 }, { 350.79999999999995, 601.52 }, { 341.03999999999996, 606.6300000000001 }, { 325.49, 602.25 }, { 308.49, 593.49 }, { 278.84000000000003, 601.49 }, { 266.17999999999995, 623.02 }, { 260.4, 629.23 }, { 252.08, 628.8599999999999 }, { 243.4, 621.2 }, { 241.23, 614.26 }, { 232.54999999999998, 602.95 }, { 222.07000000000002, 596.01 }, { 192.07000000000002, 589.0799999999999 }, { 160.97, 584.69 }, { 95.88, 578.49 }, { 37.30000000000001, 571.55 }, { 15.240000000000009, 563.55 }, { 0.0, 509.18 }, { 1.4500000000000028, 467.93 }, { 4.700000000000003, 421.21 }, { 11.210000000000008, 352.58 }, { 18.80000000000001, 298.58 }, { 33.27000000000001, 258.8 }, { 50.99000000000001, 209.88 }, { 54.99000000000001, 164.26000000000002 }, { 54.99000000000001, 142.36 }, { 50.650000000000006, 87.24000000000001 }, { 46.31, 66.07 }, { 45.95, 52.56 }, { 53.95, 29.200000000000003 }, { 82.88, 5.470000000000013 }, { 101.62, 2.180000000000007 }, { 125.84, 11.300000000000011 }, { 143.56, 37.22000000000001 }, { 147.18, 59.49000000000001 }, { 139.18, 79.93 }, { 116.03999999999999, 113.87 }, { 104.47, 137.97 }, { 81.32, 228.49 }, { 77.32, 312.81 }, { 80.57, 360.63 }, { 74.06, 395.63 }, { 61.77000000000001, 438.33 }, { 64.01000000000002, 482.18 }, { 83.53, 504.44 }, { 144.29, 502.97999999999996 }, { 176.83, 475.23999999999995 }, { 205.04, 446.78000000000003 }, { 232.52, 429.62 }, { 253.14000000000001, 419.04 }, { 322.57000000000005, 382.90000000000003 }, { 364.15, 365.75 }, { 392.72, 352.6 }, { 413.72, 331.07 }, { 422.72, 302.96 }, { 428.14, 273.76 }, { 427.78, 250.04000000000002 }, { 421.63, 221.56 }, { 407.89, 199.3 }, { 316.4, 108.77000000000001 }, { 279.51, 73.0 }, { 264.4, 50.74000000000001 }, { 258.97, 26.28 }, { 272.71000000000004, 7.660000000000011 }, { 304.53999999999996, 0.0 }, { 341.4, 21.180000000000007 }, { 392.75, 64.98000000000002 }, { 436.15, 106.98000000000002 }, { 464.67999999999995, 136.52 } };
        //double[,] lines = { { 259.64, -310.26}, { 352.22, -217.55}, { 421.28999999999996, -149.66000000000003}, { 449.13, -126.30000000000001}, { 493.25, -102.94}, { 520.73, -94.94}, { 543.16, -98.22000000000003}, { 570.28, -134.36}, { 568.11, -189.84000000000003}, { 545.33, -227.44}, { 516.36, -260.6}, { 468.30000000000007, -307.34000000000003}, { 424.53999999999996, -332.53000000000003}, { 393.81000000000006, -350.78000000000003}, { 338.12, -387.65000000000003}, { 324.01, -398.65000000000003}, { 308.82000000000005, -409.23}, { 299.82000000000005, -419.45000000000005}, { 295.48, -427.12}, { 311.03, -435.12}, { 328.03, -435.49}, { 339.6, -436.58000000000004}, { 364.19000000000005, -435.85}, { 398.55000000000007, -436.95000000000005}, { 432.55000000000007, -435.85}, { 481.01, -435.12}, { 533.08, -432.93}, { 567.4300000000001, -428.93}, { 602.15, -416.52000000000004}, { 631.44, -389.15000000000003}, { 651.69, -350.82000000000005}, { 663.26, -314.68000000000006}, { 677.37, -276.68000000000006}, { 682.79, -254.42000000000002}, { 681.71, -222.66000000000003}, { 679.1800000000001, -202.95000000000005}, { 676.28, -182.14000000000004}, { 677.01, -165.72000000000003}, { 687.13, -147.10000000000002}, { 695.8100000000001, -133.23000000000002}, { 695.09, -121.92000000000002}, { 689.66, -111.33000000000004}, { 684.24, -97.10000000000002}, { 682.79, -74.10000000000002}, { 683.51, -58.400000000000034}, { 682.79, -1.830000000000041}, { 678.79, 91.98000000000002}, { 673.37, 147.10000000000002}, { 664.37, 170.10000000000002}, { 654.6, 179.22000000000003}, { 617.0, 186.51999999999998}, { 536.35, 177.76}, { 488.62, 170.10000000000002}, { 449.57000000000005, 161.34000000000003}, { 404.72, 134.68999999999994}, { 380.5, 102.92999999999995}, { 371.09000000000003, 64.24000000000001}, { 362.40999999999997, 28.470000000000027}, { 353.01, -26.28000000000003}, { 340.36, -102.94}, { 335.28999999999996, -143.45000000000005}, { 331.28999999999996, -162.8}, { 304.16999999999996, -183.97000000000003}, { 271.99, -173.38}, { 263.66999999999996, -156.96000000000004}, { 260.36, -139.07000000000005}, { 262.16999999999996, -112.79000000000002}, { 264.33000000000004, -88.33000000000004}, { 275.18000000000006, 8.029999999999973}, { 278.44000000000005, 44.52999999999997}, { 276.27, 76.64999999999998}, { 260.36, 104.75999999999999}, { 237.94000000000005, 113.51999999999998}, { 211.94, 121.90999999999997}, { 180.48000000000002, 127.01999999999998}, { 163.48000000000002, 130.30999999999995}, { 149.38, 146.74}, { 145.76, 154.74}, { 136.0, 159.85000000000002}, { 120.44999999999999, 155.47000000000003}, { 103.44999999999999, 146.70999999999992}, { 73.80000000000001, 154.70999999999992}, { 61.139999999999986, 176.24}, { 55.360000000000014, 182.44999999999993}, { 47.04000000000002, 182.07999999999993}, { 38.360000000000014, 174.41999999999996}, { 36.19, 167.48000000000002}, { 27.50999999999999, 156.16999999999996}, { 17.03000000000003, 149.23000000000002}, { -12.96999999999997, 142.29999999999995}, { -44.06999999999999, 137.90999999999997}, { -109.16, 131.70999999999992}, { -167.73999999999998, 124.76999999999998}, { -189.79999999999998, 116.76999999999998}, { -205.04, 62.39999999999998}, { -203.58999999999997, 21.149999999999977}, { -200.33999999999997, -25.57000000000005}, { -193.82999999999998, -94.20000000000005}, { -186.23999999999998, -148.20000000000005}, { -171.76999999999998, -187.98000000000002}, { -154.04999999999998, -236.90000000000003}, { -150.04999999999998, -282.52}, { -150.04999999999998, -304.42}, { -154.39, -359.54}, { -158.73, -380.71000000000004}, { -159.08999999999997, -394.22}, { -151.08999999999997, -417.58000000000004}, { -122.16, -441.31}, { -103.41999999999999, -444.6}, { -79.19999999999999, -435.48}, { -61.47999999999999, -409.56}, { -57.859999999999985, -387.29}, { -65.85999999999999, -366.85}, { -89.0, -332.91}, { -100.57, -308.81000000000006}, { -123.72, -218.29000000000002}, { -127.72, -133.97000000000003}, { -124.47, -86.15000000000003}, { -130.98, -51.150000000000034}, { -143.26999999999998, -8.450000000000045}, { -141.02999999999997, 35.39999999999998}, { -121.50999999999999, 57.65999999999997}, { -60.75, 56.19999999999993}, { -28.20999999999998, 28.459999999999923}, { 0.0, 0.0}, { 27.480000000000018, -17.160000000000025}, { 48.10000000000002, -27.74000000000001}, { 117.53000000000003, -63.879999999999995}, { 159.11, -81.03000000000003}, { 187.68, -94.18}, { 208.68, -115.71000000000004}, { 217.68, -143.82000000000005}, { 223.10000000000002, -173.02000000000004}, { 222.74, -196.74}, { 216.59000000000003, -225.22000000000003}, { 202.85000000000002, -247.48000000000002}, { 111.36000000000001, -338.01}, { 74.47000000000003, -373.78000000000003}, { 59.360000000000014, -396.04}, { 53.93000000000001, -420.5}, { 67.67000000000002, -439.12}, { 99.5, -446.78000000000003}, { 136.36, -425.6}, { 187.71000000000004, -381.8}, { 231.11, -339.8}, { 259.64, -310.26} };
        double[,] lines = { { 0.0, 0.09999999999999432 }, { 92.58000000000004, 92.81 }, { 161.64999999999998, 160.7 }, { 189.49, 184.06 }, { 233.61, 207.42000000000002 }, { 261.09000000000003, 215.42000000000002 }, { 283.52, 212.14 }, { 310.64, 176.0 }, { 308.47, 120.51999999999998 }, { 285.69000000000005, 82.92000000000002 }, { 256.72, 49.75999999999999 }, { 208.66000000000008, 3.019999999999982 }, { 164.89999999999998, -22.170000000000016 }, { 134.17000000000007, -40.420000000000016 }, { 78.48000000000002, -77.29 }, { 64.37, -88.29 }, { 49.180000000000064, -98.87 }, { 40.180000000000064, -109.09 }, { 35.84000000000003, -116.76 }, { 51.389999999999986, -124.76 }, { 68.38999999999999, -125.13000000000001 }, { 79.96000000000004, -126.22000000000001 }, { 104.55000000000007, -125.49000000000001 }, { 138.91000000000008, -126.59 }, { 172.91000000000008, -125.49000000000001 }, { 221.37, -124.76 }, { 273.44000000000005, -122.57000000000001 }, { 307.7900000000001, -118.57000000000001 }, { 342.51, -106.16000000000001 }, { 371.80000000000007, -78.79 }, { 392.05000000000007, -40.46000000000001 }, { 403.62, -4.320000000000022 }, { 417.73, 33.67999999999998 }, { 423.15, 55.94 }, { 422.07000000000005, 87.69999999999999 }, { 419.5400000000001, 107.40999999999997 }, { 416.64, 128.21999999999997 }, { 417.37, 144.64 }, { 427.49, 163.26 }, { 436.1700000000001, 177.13 }, { 435.45000000000005, 188.44 }, { 430.02, 199.02999999999997 }, { 424.6, 213.26 }, { 423.15, 236.26 }, { 423.87, 251.95999999999998 }, { 423.15, 308.53 }, { 419.15, 402.34000000000003 }, { 413.73, 457.46000000000004 }, { 404.73, 480.46000000000004 }, { 394.96000000000004, 489.58000000000004 }, { 357.36, 496.88 }, { 276.71000000000004, 488.12 }, { 228.98000000000002, 480.46000000000004 }, { 189.93000000000006, 471.70000000000005 }, { 145.08000000000004, 445.04999999999995 }, { 120.86000000000001, 413.28999999999996 }, { 111.45000000000005, 374.6 }, { 102.76999999999998, 338.83000000000004 }, { 93.37, 284.08 }, { 80.72000000000003, 207.42000000000002 }, { 75.64999999999998, 166.90999999999997 }, { 71.64999999999998, 147.56 }, { 44.52999999999997, 126.38999999999999 }, { 12.350000000000023, 136.98000000000002 }, { 4.029999999999973, 153.39999999999998 }, { 0.7200000000000273, 171.28999999999996 }, { 2.5299999999999727, 197.57 }, { 4.690000000000055, 222.02999999999997 }, { 15.540000000000077, 318.39 }, { 18.800000000000068, 354.89 }, { 16.629999999999995, 387.01 }, { 0.7200000000000273, 415.12 }, { -21.699999999999932, 423.88 }, { -47.69999999999999, 432.27 }, { -79.15999999999997, 437.38 }, { -96.15999999999997, 440.66999999999996 }, { -110.25999999999999, 457.1 }, { -113.88, 465.1 }, { -123.63999999999999, 470.21000000000004 }, { -139.19, 465.83000000000004 }, { -156.19, 457.06999999999994 }, { -185.83999999999997, 465.06999999999994 }, { -198.5, 486.6 }, { -204.27999999999997, 492.80999999999995 }, { -212.59999999999997, 492.43999999999994 }, { -221.27999999999997, 484.78 }, { -223.45, 477.84000000000003 }, { -232.13, 466.53 }, { -242.60999999999996, 459.59000000000003 }, { -272.60999999999996, 452.65999999999997 }, { -303.71, 448.27 }, { -368.79999999999995, 442.06999999999994 }, { -427.38, 435.13 }, { -449.43999999999994, 427.13 }, { -464.67999999999995, 372.76 }, { -463.22999999999996, 331.51 }, { -459.97999999999996, 284.78999999999996 }, { -453.46999999999997, 216.15999999999997 }, { -445.88, 162.15999999999997 }, { -431.40999999999997, 122.38 }, { -413.68999999999994, 73.45999999999998 }, { -409.68999999999994, 27.840000000000003 }, { -409.68999999999994, 5.939999999999998 }, { -414.03, -49.18000000000001 }, { -418.37, -70.35000000000002 }, { -418.72999999999996, -83.86000000000001 }, { -410.72999999999996, -107.22000000000001 }, { -381.79999999999995, -130.95 }, { -363.05999999999995, -134.24 }, { -338.84, -125.12 }, { -321.12, -99.2 }, { -317.5, -76.93 }, { -325.5, -56.49000000000001 }, { -348.64, -22.55000000000001 }, { -360.21, 1.549999999999983 }, { -383.36, 92.07 }, { -387.36, 176.39 }, { -384.11, 224.20999999999998 }, { -390.62, 259.21 }, { -402.90999999999997, 301.90999999999997 }, { -400.66999999999996, 345.76 }, { -381.15, 368.02 }, { -320.39, 366.55999999999995 }, { -287.84999999999997, 338.81999999999994 }, { -259.64, 310.36 }, { -232.15999999999997, 293.2 }, { -211.53999999999996, 282.62 }, { -142.10999999999996, 246.48000000000002 }, { -100.52999999999997, 229.32999999999998 }, { -71.95999999999998, 216.18 }, { -50.95999999999998, 194.64999999999998 }, { -41.95999999999998, 166.53999999999996 }, { -36.539999999999964, 137.33999999999997 }, { -36.89999999999998, 113.62 }, { -43.049999999999955, 85.13999999999999 }, { -56.789999999999964, 62.879999999999995 }, { -148.27999999999997, -27.650000000000006 }, { -185.16999999999996, -63.420000000000016 }, { -200.27999999999997, -85.68 }, { -205.70999999999998, -110.14000000000001 }, { -191.96999999999997, -128.76 }, { -160.14, -136.42000000000002 }, { -123.27999999999997, -115.24000000000001 }, { -71.92999999999995, -71.44 }, { -28.529999999999973, -29.439999999999998 }, { 0.0, 0.09999999999999432 } };
        int length = 146;
        //int length = 4;
        //double[,] lines = { { 0, 0 }, { 5, 10 }, { 0, 15 }, { 0, 50 }, { 50, 0 }, { 0, 0 } };
        //new double[146, 2] 

        path = new CarPath();
        Vector3 np = startPos.position;//Vector3.zero;

        float offsetY = -0.1f;
        float xScalar = (float) .6;
        float yScalar = (float).6;

        //foreach (double[,] line in lines)
        for (int i = 0; i < length; i++)
        {
            //double[] tokens= lines[i, 2];
            np.x = (float) lines[i, 0] * xScalar;//float.Parse(tokens[0]);
            np.z = (float) (lines[i, 1] * yScalar) +offsetY;
            //float.Parse(tokens[1]) + offsetY;

            np.y = (float) 0.5;//float.Parse();
            PathNode p = new PathNode();
            p.pos = np;
            path.nodes.Add(p);
        }
        /*
        string filename = "thunder_path";

		TextAsset bindata = Resources.Load(filename) as TextAsset;

		if(bindata == null)
			return;

		string[] lines = bindata.text.Split('\n');

		Debug.Log(string.Format("found {0} path points. to load", lines.Length));

		path = new CarPath();

		Vector3 np = Vector3.zero;

		float offsetY = -0.1f;

		foreach(string line in lines)
		{
			string[] tokens = line.Split(',');

			if (tokens.Length != 3)
				continue;
			np.x = float.Parse(tokens[0]);
			np.y = float.Parse(tokens[1]) + offsetY;
			np.z = float.Parse(tokens[2]);
			PathNode p = new PathNode();
			p.pos = np;
			path.nodes.Add(p);
		}
        */

    }

	void MakeScriptedPath()
	{
		TrackScript script = new TrackScript();

		if(script.Read(pathToLoad))
		{
			path = new CarPath();
			TrackParams tparams = new TrackParams();
			tparams.numToSet = 0;
			tparams.rotCur = Quaternion.identity;
			tparams.lastPos = startPos.position;

			float dY = 0.0f;
			float turn = 0f;

			Vector3 s = startPos.position;
			s.y = 0.5f;
			span.x = 0f;
			span.y = 0f;
			span.z = spanDist;
			float turnVal = 10.0f;

			foreach(TrackScriptElem se in script.track)
			{
				if(se.state == TrackParams.State.AngleDY)
				{
					turnVal = se.value;
				}
				else if(se.state == TrackParams.State.CurveY)
				{
					turn = 0.0f;
					dY = se.value * turnVal;
				}
				else
				{
					dY = 0.0f;
					turn = 0.0f;
				}

				for(int i = 0; i < se.numToSet; i++)
				{

					Vector3 np = s;
					PathNode p = new PathNode();
					p.pos = np;
					path.nodes.Add(p);

					turn = dY;

					Quaternion rot = Quaternion.Euler(0.0f, turn, 0f);
					span = rot * span.normalized;
					span *= spanDist;
					s = s + span;
				}
					
			}
		}
	}

	void MakeRandomPath()
	{
		path = new CarPath();

		Vector3 s = startPos.position;
		float turn = 0f;
		s.y = 0.5f;

		span.x = 0f;
		span.y = 0f;
		span.z = spanDist;

		for(int iS = 0; iS < numSpans; iS++)
		{
			Vector3 np = s;
			PathNode p = new PathNode();
			p.pos = np;
			path.nodes.Add(p);

			float t = Random.Range(-1.0f * turnInc, turnInc);

			turn += t;

			Quaternion rot = Quaternion.Euler(0.0f, turn, 0f);
			span = rot * span.normalized;

			if(SegmentCrossesPath( np + (span.normalized * 100.0f), 90.0f ))
			{
				//turn in the opposite direction if we think we are going to run over the path
				turn *= -0.5f;
				rot = Quaternion.Euler(0.0f, turn, 0f);
				span = rot * span.normalized;
			}

			span *= spanDist;

			s = s + span;
		}
	}

	public bool SegmentCrossesPath(Vector3 posA, float rad)
	{
		foreach(PathNode pn in path.nodes)
		{
			float d = (posA - pn.pos).magnitude;

			if(d < rad)
				return true;
		}

		return false;
	}

	public void SetPath(CarPath p)
	{
		path = p;

		GameObject[] prev = GameObject.FindGameObjectsWithTag("pathNode");

		Debug.Log(string.Format("Cleaning up {0} old nodes. {1} new ones.", prev.Length, p.nodes.Count));

		DestroyRoad();

		foreach(PathNode pn in path.nodes)
		{
			GameObject go = Instantiate(prefab, pn.pos, Quaternion.identity) as GameObject;
			go.tag = "pathNode";
		}
	}
}
